import { 
  IncomingMessage, 
  BotResponse, 
  ChatSession, 
  ConversationContext, 
  Intent,
  Patient,
  Clinic
} from '@/types';
import { DatabaseService } from '@/config/database';
import { RedisService } from '@/config/redis';
import { ConversationManager } from './ConversationManager';
import { NLPService } from './NLPService';
import logger from '@/config/logger';

export class BotEngine {
  private db: DatabaseService;
  private redis: RedisService;
  private conversationManager: ConversationManager;
  private nlpService: NLPService;

  constructor() {
    this.db = DatabaseService.getInstance();
    this.redis = RedisService.getInstance();
    this.conversationManager = new ConversationManager();
    this.nlpService = new NLPService();
  }

  async processMessage(message: IncomingMessage): Promise<BotResponse> {
    try {
      logger.info('Processing message', { 
        platform: message.platform, 
        chatId: message.chatId,
        text: message.text?.substring(0, 100)
      });

      // 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const session = await this.getOrCreateSession(message);
      
      // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–ª–∏–Ω–∏–∫–∏
      const clinic = await this.getClinic(session.clinicId);
      if (!clinic) {
        return this.createErrorResponse('–ö–ª–∏–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
      await this.checkRateLimit(message.chatId);

      // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const intent = await this.nlpService.detectIntent(
        message.text, 
        session.sessionData,
        clinic.settings.languages[0] || 'ru'
      );

      // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
      const response = await this.handleIntent(intent, session, message, clinic);

      // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      await this.updateSession(session, intent, response);

      // 7. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.logMessage(session.id, 'incoming', message.text);
      await this.logMessage(session.id, 'outgoing', response.text);

      return response;

    } catch (error) {
      logger.error('Error processing message:', error);
      return this.createErrorResponse('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  private async getOrCreateSession(message: IncomingMessage): Promise<ChatSession> {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ chat_id
    let patient = await this.findPatient(message);
    
    if (!patient) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      patient = await this.createPatient(message);
    }

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    let session = await this.db.queryOne<ChatSession>(`
      SELECT * FROM chat_sessions 
      WHERE patient_id = $1 AND platform = $2 AND is_active = true
      ORDER BY last_activity DESC LIMIT 1
    `, [patient.id, message.platform]);

    if (!session) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const clinicId = await this.determineClinic(message);
      
      const result = await this.db.query<ChatSession>(`
        INSERT INTO chat_sessions (patient_id, clinic_id, platform, session_data)
        VALUES ($1, $2, $3, $4)
        RETURNING *
      `, [
        patient.id,
        clinicId,
        message.platform,
        JSON.stringify({
          flow: 'GREETING',
          step: 'START',
          data: {},
          retryCount: 0,
          startTime: new Date()
        })
      ]);

      session = result.rows[0];
    }

    return session;
  }

  private async findPatient(message: IncomingMessage): Promise<Patient | null> {
    if (message.phone) {
      return this.db.queryOne<Patient>(
        'SELECT * FROM patients WHERE phone = $1',
        [message.phone]
      );
    }

    if (message.chatId) {
      return this.db.queryOne<Patient>(
        'SELECT * FROM patients WHERE chat_id = $1',
        [message.chatId]
      );
    }

    return null;
  }

  private async createPatient(message: IncomingMessage): Promise<Patient> {
    const result = await this.db.query<Patient>(`
      INSERT INTO patients (phone, chat_id, platform, preferred_language)
      VALUES ($1, $2, $3, $4)
      RETURNING *
    `, [
      message.phone || '',
      message.chatId,
      message.platform,
      'ru' // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    ]);

    return result.rows[0];
  }

  private async determineClinic(message: IncomingMessage): Promise<number> {
    // –í MVP –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ–¥–Ω—É –∫–ª–∏–Ω–∏–∫—É
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞
    const clinic = await this.db.queryOne<{ id: number }>(`
      SELECT id FROM clinics WHERE is_active = true LIMIT 1
    `);

    if (!clinic) {
      throw new Error('No active clinic found');
    }

    return clinic.id;
  }

  private async getClinic(clinicId: number): Promise<Clinic | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = `clinic:${clinicId}`;
    const cached = await this.redis.get(cacheKey);
    
    if (cached) {
      return JSON.parse(cached);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
    const clinic = await this.db.queryOne<Clinic>(`
      SELECT * FROM clinics WHERE id = $1 AND is_active = true
    `, [clinicId]);

    if (clinic) {
      // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç
      await this.redis.set(cacheKey, JSON.stringify(clinic), 1800);
    }

    return clinic;
  }

  private async handleIntent(
    intent: Intent, 
    session: ChatSession, 
    message: IncomingMessage,
    clinic: Clinic
  ): Promise<BotResponse> {
    
    logger.info('Handling intent', { 
      intent: intent.name, 
      confidence: intent.confidence,
      sessionId: session.id 
    });

    switch (intent.name) {
      case 'GREETING':
        return this.handleGreeting(session, clinic);
      
      case 'BOOK_APPOINTMENT':
        return this.conversationManager.handleBookingFlow(session, intent, clinic);
      
      case 'CANCEL_APPOINTMENT':
        return this.handleCancellation(session, intent);
      
      case 'CONFIRM_APPOINTMENT':
        return this.handleConfirmation(session, intent);
      
      case 'GET_INFO':
        return this.handleInfoRequest(session, intent, clinic);
      
      case 'CHANGE_LANGUAGE':
        return this.handleLanguageChange(session, intent);
      
      default:
        return this.conversationManager.handleCurrentFlow(session, message.text, clinic);
    }
  }

  private async handleGreeting(session: ChatSession, clinic: Clinic): Promise<BotResponse> {
    const patient = await this.db.queryOne<Patient>(`
      SELECT * FROM patients WHERE id = $1
    `, [session.patientId]);

    const greeting = patient?.name 
      ? `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${patient.name}!` 
      : '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!';

    return {
      type: 'keyboard',
      text: `${greeting} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–Ω–∏–∫—É "${clinic.name}". –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`,
      options: [
        { id: 'book', text: 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º', value: 'book_appointment' },
        { id: 'info', text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–µ', value: 'clinic_info' },
        { id: 'services', text: 'ü¶∑ –ù–∞—à–∏ —É—Å–ª—É–≥–∏', value: 'services_info' },
        { id: 'contact', text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', value: 'contact_info' }
      ],
      nextStep: 'MAIN_MENU'
    };
  }

  private async handleCancellation(session: ChatSession, intent: Intent): Promise<BotResponse> {
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    const appointments = await this.db.query(`
      SELECT a.*, d.name as doctor_name 
      FROM appointments a
      JOIN doctors d ON a.doctor_id = d.id
      WHERE a.patient_id = $1 
      AND a.status IN ('scheduled', 'confirmed')
      AND a.appointment_date > NOW()
      ORDER BY a.appointment_date
    `, [session.patientId]);

    if (appointments.rows.length === 0) {
      return {
        type: 'text',
        text: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
      };
    }

    return {
      type: 'list',
      text: '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:',
      options: appointments.rows.map(apt => ({
        id: apt.id.toString(),
        text: `${this.formatDate(apt.appointment_date)} - ${apt.doctor_name}`,
        value: `cancel_${apt.id}`,
        description: apt.service_type
      }))
    };
  }

  private async handleConfirmation(session: ChatSession, intent: Intent): Promise<BotResponse> {
    // –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    const appointmentId = this.extractAppointmentId(intent);
    
    if (appointmentId) {
      await this.db.query(`
        UPDATE appointments 
        SET confirmed = true, status = 'confirmed'
        WHERE id = $1 AND patient_id = $2
      `, [appointmentId, session.patientId]);

      return {
        type: 'text',
        text: '‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.'
      };
    }

    return {
      type: 'text',
      text: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
    };
  }

  private async handleInfoRequest(session: ChatSession, intent: Intent, clinic: Clinic): Promise<BotResponse> {
    return {
      type: 'text',
      text: `üè• –ö–ª–∏–Ω–∏–∫–∞: ${clinic.name}\n` +
            `üìç –ê–¥—Ä–µ—Å: ${clinic.address}\n` +
            `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${clinic.phone}\n\n` +
            `–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è!`
    };
  }

  private async handleLanguageChange(session: ChatSession, intent: Intent): Promise<BotResponse> {
    // –õ–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    return {
      type: 'keyboard',
      text: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:',
      options: [
        { id: 'ru', text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', value: 'lang_ru' },
        { id: 'kz', text: 'üá∞üáø “ö–∞–∑–∞“õ—à–∞', value: 'lang_kz' },
        { id: 'en', text: 'üá∫üá∏ English', value: 'lang_en' }
      ]
    };
  }

  private async updateSession(
    session: ChatSession, 
    intent: Intent, 
    response: BotResponse
  ): Promise<void> {
    const updatedContext = {
      ...session.sessionData,
      lastIntent: intent.name,
      lastResponse: response.type,
      step: response.nextStep || session.sessionData.step
    };

    await this.db.query(`
      UPDATE chat_sessions 
      SET session_data = $1, last_activity = NOW()
      WHERE id = $2
    `, [JSON.stringify(updatedContext), session.id]);
  }

  private async logMessage(sessionId: number, type: string, content: string): Promise<void> {
    await this.db.query(`
      INSERT INTO message_logs (session_id, message_type, content)
      VALUES ($1, $2, $3)
    `, [sessionId, type, content]);
  }

  private async checkRateLimit(chatId: string): Promise<void> {
    const key = `rate_limit:${chatId}`;
    const current = await this.redis.incr(key);
    
    if (current === 1) {
      await this.redis.expire(key, 60); // 1 minute window
    }
    
    if (current > 30) { // max 30 messages per minute
      throw new Error('Rate limit exceeded');
    }
  }

  private createErrorResponse(message: string): BotResponse {
    return {
      type: 'text',
      text: `‚ùå ${message}`
    };
  }

  private extractAppointmentId(intent: Intent): number | null {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π intent
    const idEntity = intent.entities.find(e => e.type === 'appointment_id');
    return idEntity ? parseInt(idEntity.value) : null;
  }

  private formatDate(date: Date): string {
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(new Date(date));
  }
}