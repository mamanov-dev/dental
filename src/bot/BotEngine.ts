import { 
  IncomingMessage, 
  BotResponse, 
  ChatSession, 
  ConversationContext, 
  Intent,
  Patient,
  Clinic,
  ResponseOption
} from '@/types';
import { DatabaseService } from '@/config/database';
import { RedisService } from '@/config/redis';
import { ConversationManager } from './ConversationManager';
import { NLPService } from './NLPService';
import logger from '@/config/logger';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è ConversationContext —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
interface ExtendedConversationContext extends ConversationContext {
  lastIntent?: string;
  lastResponse?: string;
  lastMessageTime?: Date;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –∏–∑ –ë–î
interface AppointmentRow {
  id: number;
  appointment_date: Date;
  doctor_name: string;
  service_type?: string;
}

export class BotEngine {
  private db: DatabaseService;
  private redis: RedisService;
  private conversationManager: ConversationManager;
  private nlpService: NLPService;

  constructor() {
    this.db = DatabaseService.getInstance();
    this.redis = RedisService.getInstance();
    this.conversationManager = new ConversationManager();
    this.nlpService = new NLPService();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏
  private createDefaultSessionData(): ConversationContext {
    return {
      flow: '',
      step: '',
      data: {},
      retryCount: 0,
      startTime: new Date()
    };
  }

  async processMessage(message: IncomingMessage): Promise<BotResponse> {
    try {
      logger.info('Processing message', { 
        platform: message.platform, 
        chatId: message.chatId,
        text: message.text?.substring(0, 100)
      });

      // 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const session = await this.getOrCreateSession(message);
      logger.info('Session created/found', { sessionId: session.id, clinicId: session.clinicId });
      
      // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–ª–∏–Ω–∏–∫–∏
      const clinic = await this.getClinic(session.clinicId);
      if (!clinic) {
        logger.error('Clinic not found', { clinicId: session.clinicId });
        return this.createErrorResponse('–ö–ª–∏–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      logger.info('Clinic found', { clinicName: clinic.name, clinicId: clinic.id });

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
      await this.checkRateLimit(message.chatId);

      // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ NLP
      const intent = await this.nlpService.detectIntent(
        message.text, 
        session.sessionData,
        clinic.settings?.languages?.[0] || 'ru'
      );

      logger.info('Intent detected', { 
        intent: intent.name, 
        confidence: intent.confidence,
        hasChatGPTResponse: !!(intent as any).chatGPTResponse
      });

      // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
      const response = await this.handleIntent(intent, session, message, clinic);

      // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      await this.updateSession(session, intent, response);

      // 7. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.logMessage(session.id, 'incoming', message.text);
      await this.logMessage(session.id, 'outgoing', response.text);

      logger.info('Message processed successfully', { responseType: response.type });
      return response;

    } catch (error) {
      logger.error('Error processing message:', error);
      return this.createErrorResponse('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  private async handleIntent(
    intent: Intent, 
    session: ChatSession, 
    message: IncomingMessage,
    clinic: Clinic
  ): Promise<BotResponse> {
    
    try {
      logger.info('Handling intent', { 
        intent: intent.name, 
        confidence: intent.confidence,
        sessionId: session.id 
      });

      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ sessionData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!session.sessionData || typeof session.sessionData !== 'object') {
        session.sessionData = this.createDefaultSessionData();
        logger.warn('Reset session data to default');
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º ChatGPT –¥–∞–Ω–Ω—ã–µ
      const chatGPTResponse = (intent as any).chatGPTResponse;
      const shouldUseBuiltIn = (intent as any).shouldUseBuiltIn;
      
      // üî• –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ChatGPT –¥–∞–Ω–Ω—ã—Ö
      logger.info('ChatGPT response data:', {
        hasChatGPTResponse: !!chatGPTResponse,
        shouldUseBuiltIn,
        responsePreview: chatGPTResponse?.substring(0, 100),
        intent: intent.name,
        confidence: intent.confidence
      });

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ChatGPT –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ shouldUseBuiltIn = false
      if (chatGPTResponse && shouldUseBuiltIn === false) {
        logger.info('üéØ Using ChatGPT response directly', {
          intent: intent.name,
          responseLength: chatGPTResponse.length,
          confidence: intent.confidence
        });
        
        return {
          type: 'text',
          text: chatGPTResponse,
          metadata: {
            source: 'chatgpt',
            intent: intent.name,
            confidence: intent.confidence
          }
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ ChatGPT –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
      if (session.sessionData?.flow && session.sessionData?.step && shouldUseBuiltIn !== false) {
        logger.info('User in active flow, using conversation manager');
        return await this.conversationManager.handleCurrentFlow(session, message.text, clinic);
      }

      // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (intent.name === 'GREETING' || 
          message.text.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç') ||
          message.text.toLowerCase().includes('hello') ||
          message.text.toLowerCase().includes('start')) {
        intent.name = 'GREETING';
        intent.confidence = 0.95;
        logger.info('Forced greeting intent');
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
      if (message.isButton || message.buttonData) {
        const buttonValue = message.buttonData || message.text;
        logger.info('Processing button click', { buttonValue });
        
        switch (buttonValue) {
          case 'book_appointment':
            intent.name = 'BOOK_APPOINTMENT';
            intent.confidence = 0.99;
            break;
          case 'cancel_appointment':
            intent.name = 'CANCEL_APPOINTMENT';
            intent.confidence = 0.99;
            break;
          case 'clinic_info':
          case 'services_info':
          case 'contact_info':
            intent.name = 'GET_INFO';
            intent.confidence = 0.99;
            break;
        }
        logger.info('Button intent detected', { intent: intent.name });
      }

      // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
      switch (intent.name) {
        case 'GREETING':
          // –î–û–ë–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º ChatGPT –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
          if (chatGPTResponse && shouldUseBuiltIn === false) {
            logger.info('Using ChatGPT greeting response');
            return {
              type: 'text',
              text: chatGPTResponse,
              metadata: {
                source: 'chatgpt',
                intent: intent.name
              }
            };
          }
          return await this.handleGreeting(session, clinic);
        
        case 'BOOK_APPOINTMENT':
          return await this.conversationManager.handleBookingFlow(session, intent, clinic);
        
        case 'CANCEL_APPOINTMENT':
          return await this.conversationManager.handleCancellationFlow(session, intent, clinic);
        
        case 'CONFIRM_APPOINTMENT':
          return await this.handleConfirmation(session, intent);
        
        case 'GET_INFO':
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ChatGPT –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
          if (chatGPTResponse && shouldUseBuiltIn === false) {
            logger.info('Using ChatGPT info response');
            return {
              type: 'text',
              text: chatGPTResponse,
              metadata: {
                source: 'chatgpt',
                intent: intent.name
              }
            };
          }
          return await this.handleInfoRequest(session, intent, clinic, message);
        
        case 'CASUAL_CONVERSATION':
          // –ù–û–í–û–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ChatGPT
          if (chatGPTResponse && shouldUseBuiltIn === false) {
            logger.info('Using ChatGPT casual conversation response');
            return {
              type: 'text',
              text: chatGPTResponse,
              metadata: {
                source: 'chatgpt',
                intent: intent.name
              }
            };
          }
          return await this.handleCasualConversation(session, message.text);
        
        case 'CONTINUE_CONVERSATION':
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ChatGPT –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
          if (chatGPTResponse && shouldUseBuiltIn === false) {
            logger.info('Using ChatGPT continue conversation response');
            return {
              type: 'text',
              text: chatGPTResponse,
              metadata: {
                source: 'chatgpt',
                intent: intent.name
              }
            };
          }
          return await this.handleFallback(session, message.text);
        
        case 'FALLBACK':
        case 'UNKNOWN':
        default:
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º ChatGPT –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          if (chatGPTResponse && shouldUseBuiltIn === false) {
            logger.info('Using ChatGPT fallback response');
            return {
              type: 'text',
              text: chatGPTResponse,
              metadata: {
                source: 'chatgpt',
                intent: intent.name
              }
            };
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫
          if (session.sessionData?.flow && session.sessionData?.step) {
            logger.info('User in active flow, processing with ConversationManager');
            return await this.conversationManager.handleCurrentFlow(session, message.text, clinic);
          }
          
          return await this.handleFallback(session, message.text);
      }
    } catch (error) {
      logger.error('Error handling intent:', error);
      return this.createErrorResponse('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–∂–µ—Å–∫–æ–≥–æ –æ–±—â–µ–Ω–∏—è
  private async handleCasualConversation(session: ChatSession, text: string): Promise<BotResponse> {
    try {
      const lowerText = text.toLowerCase();
      
      if (lowerText.includes('–∫–∞–∫ –¥–µ–ª–∞') || lowerText.includes('–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—Ç–µ')) {
        return {
          type: 'text',
          text: '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏! –£ –Ω–∞—Å –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ - –ø–æ–º–æ–≥–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞–º –æ–±—Ä–µ—Å—Ç–∏ –∫—Ä–∞—Å–∏–≤—ã–µ —É–ª—ã–±–∫–∏ üòä\n\n' +
                '–ê –∫–∞–∫ —É –≤–∞—Å –¥–µ–ª–∞? –ú–æ–≥—É –ª–∏ —è –ø–æ–º–æ—á—å –≤–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ –ø—Ä–∏–µ–º –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö?'
        };
      }
      
      if (lowerText.includes('—Å–ø–∞—Å–∏–±–æ') || lowerText.includes('–±–ª–∞–≥–æ–¥–∞—Ä—é')) {
        return {
          type: 'text',
          text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å üòä\n\n' +
                '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ!'
        };
      }
      
      if (lowerText.includes('–ø–æ–∫–∞') || lowerText.includes('–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è')) {
        return {
          type: 'text',
          text: '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë–µ—Ä–µ–≥–∏—Ç–µ —Å–≤–æ–∏ –∑—É–±–∫–∏ –∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å üòä\n\n' +
                '–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–µ!'
        };
      }
      
      // –û–±—â–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç
      return {
        type: 'text',
        text: '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º! üòä\n\n' +
              '–ú–æ–≥—É:\n' +
              '‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É\n' +
              '‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏ —Ü–µ–Ω–∞—Ö\n' +
              '‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–Ω–∏–∫–∏\n\n' +
              '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!'
      };
    } catch (error) {
      logger.error('Error in handleCasualConversation:', error);
      return this.createErrorResponse('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ.');
    }
  }

  private async handleGreeting(session: ChatSession, clinic: Clinic): Promise<BotResponse> {
    try {
      logger.info('Handling greeting', { sessionId: session.id });
      
      const patient = await this.db.queryOne<Patient>(`
        SELECT * FROM patients WHERE id = $1
      `, [session.patientId]);

      const greeting = patient?.name 
        ? `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${patient.name}!` 
        : '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!';

      // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
      return {
        type: 'text',
        text: `${greeting} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–Ω–∏–∫—É "${clinic.name}"! ü¶∑\n\n` +
              `–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –∏ –º–æ–≥—É –ø–æ–º–æ—á—å:\n` +
              `‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É\n` +
              `‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å\n` +
              `‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏ —Ü–µ–Ω–∞—Ö\n` +
              `‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã\n\n` +
              `–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! üòä`,
        nextStep: 'MAIN_MENU'
      };
    } catch (error) {
      logger.error('Error in handleGreeting:', error);
      return this.createErrorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.');
    }
  }

  private async handleConfirmation(session: ChatSession, intent: Intent): Promise<BotResponse> {
    try {
      const appointmentId = this.extractAppointmentId(intent);
      
      if (appointmentId) {
        const result = await this.db.query(`
          UPDATE appointments 
          SET confirmed = true, status = 'confirmed', updated_at = NOW()
          WHERE id = $1 AND patient_id = $2
          RETURNING *
        `, [appointmentId, session.patientId]);

        if (result.rows.length > 0) {
          return {
            type: 'text',
            text: '‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.'
          };
        }
      }

      return {
        type: 'text',
        text: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
      };
    } catch (error) {
      logger.error('Error in handleConfirmation:', error);
      return this.createErrorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.');
    }
  }

  private async handleInfoRequest(session: ChatSession, intent: Intent, clinic: Clinic, message: IncomingMessage): Promise<BotResponse> {
    try {
      const buttonValue = message.buttonData || message.text.toLowerCase();
      
      if (buttonValue.includes('—É—Å–ª—É–≥') || buttonValue.includes('service')) {
        return {
          type: 'text',
          text: `ü¶∑ –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n\n` +
                `‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ - –æ—Ç 5,000 —Ç–≥\n` +
                `‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤ - 15,000 —Ç–≥\n` +
                `‚Ä¢ –õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ - –æ—Ç 25,000 —Ç–≥\n` +
                `‚Ä¢ –ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Ç 50,000 —Ç–≥\n` +
                `‚Ä¢ –ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è - –æ—Ç 200,000 —Ç–≥\n` +
                `‚Ä¢ –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è (–±—Ä–µ–∫–µ—Ç—ã) - –æ—Ç 300,000 —Ç–≥\n\n` +
                `–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"!`
        };
      }
      
      if (buttonValue.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || buttonValue.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || buttonValue.includes('–∞–¥—Ä–µ—Å')) {
        return {
          type: 'text',
          text: `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n` +
                `–¢–µ–ª–µ—Ñ–æ–Ω: ${clinic.phone || '+7 (701) 234-56-78'}\n` +
                `üìç –ê–¥—Ä–µ—Å: ${clinic.address || '–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è, 123'}\n\n` +
                `üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n` +
                `–ü–Ω-–ü—Ç: 09:00 - 18:00\n` +
                `–°–±: 10:00 - 16:00\n` +
                `–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π\n\n` +
                `–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞–º –ø–æ–º–æ—á—å! üòä`
        };
      }
      
      // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–µ
      return {
        type: 'text',
        text: `üè• –ö–ª–∏–Ω–∏–∫–∞ "${clinic.name}"\n\n` +
              `–ú—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞ —Å –æ–ø—ã—Ç–Ω—ã–º–∏ –≤—Ä–∞—á–∞–º–∏ –∏ –Ω–æ–≤–µ–π—à–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.\n\n` +
              `üìç –ê–¥—Ä–µ—Å: ${clinic.address || '–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è, 123'}\n` +
              `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${clinic.phone || '+7 (701) 234-56-78'}\n\n` +
              `–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, —Ü–µ–Ω–∞—Ö –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–µ–º! ü¶∑`
      };
    } catch (error) {
      logger.error('Error in handleInfoRequest:', error);
      return this.createErrorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–Ω–∏–∫–µ.');
    }
  }

  private async handleFallback(session: ChatSession, text: string): Promise<BotResponse> {
    try {
      if (!session.sessionData || typeof session.sessionData !== 'object') {
        session.sessionData = this.createDefaultSessionData();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      const lowerText = text.toLowerCase();
      
      if (lowerText.includes('–æ—Ç–º–µ–Ω') || lowerText.includes('cancel')) {
        logger.info('Detected cancellation keywords in fallback');
        const clinic = await this.getClinic(session.clinicId);
        if (clinic) {
          const intent: Intent = { 
            name: 'CANCEL_APPOINTMENT', 
            confidence: 0.95,
            entities: [],
            context: session.sessionData
          };
          return await this.conversationManager.handleCancellationFlow(session, intent, clinic);
        }
      }

      if (lowerText.includes('–∑–∞–ø–∏—Å') || lowerText.includes('–ø—Ä–∏–µ–º')) {
        logger.info('Detected booking keywords in fallback');
        const clinic = await this.getClinic(session.clinicId);
        if (clinic) {
          const intent: Intent = { 
            name: 'BOOK_APPOINTMENT', 
            confidence: 0.95,
            entities: [],
            context: session.sessionData
          };
          return await this.conversationManager.handleBookingFlow(session, intent, clinic);
        }
      }

      // –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π fallback –æ—Ç–≤–µ—Ç
      const sessionData = session.sessionData;
      sessionData.retryCount = (sessionData.retryCount || 0) + 1;

      if (sessionData.retryCount > 3) {
        return {
          type: 'text',
          text: 'üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–∞–≤–∞–π—Ç–µ —è –ø–µ—Ä–µ–≤–µ–¥—É –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n' +
                '–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:\n' +
                '‚Ä¢ "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è" - –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º\n' +
                '‚Ä¢ "–æ—Ç–º–µ–Ω–∏—Ç—å" - –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏\n' +
                '‚Ä¢ "—É—Å–ª—É–≥–∏" - —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö\n' +
                '‚Ä¢ "–∫–æ–Ω—Ç–∞–∫—Ç—ã" - –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∞–¥—Ä–µ—Å'
        };
      }

      return {
        type: 'text',
        text: 'ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n' +
              '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n' +
              '‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É\n' +
              '‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å\n' +
              '‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏ —Ü–µ–Ω–∞—Ö\n' +
              '‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n\n' +
              '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç! üòä'
      };
    } catch (error) {
      logger.error('Error in handleFallback:', error);
      return this.createErrorResponse('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  private async getOrCreateSession(message: IncomingMessage): Promise<ChatSession> {
    try {
      logger.info('Getting or creating session', { chatId: message.chatId, platform: message.platform });
      
      let patient = await this.findPatient(message);
      
      if (!patient) {
        logger.info('Patient not found, creating new patient');
        patient = await this.createPatient(message);
        logger.info('Patient created', { patientId: patient.id });
      } else {
        logger.info('Patient found', { patientId: patient.id });
      }

      const existingSession = await this.db.queryOne<any>(`
        SELECT * FROM chat_sessions 
        WHERE patient_id = $1 AND platform = $2 AND is_active = true
        ORDER BY last_activity DESC LIMIT 1
      `, [patient.id, message.platform]);

      if (existingSession) {
        logger.info('Found existing session', { 
          sessionId: existingSession.id, 
          clinicId: existingSession.clinic_id 
        });
        
        if (!existingSession.clinic_id) {
          logger.warn('Session missing clinic_id, updating...');
          const defaultClinicId = await this.determineClinic(message);
          
          await this.db.query(`
            UPDATE chat_sessions 
            SET clinic_id = $1 
            WHERE id = $2
          `, [defaultClinicId, existingSession.id]);
          
          existingSession.clinic_id = defaultClinicId;
        }

        let sessionData;
        try {
          if (typeof existingSession.session_data === 'string') {
            sessionData = JSON.parse(existingSession.session_data);
          } else if (existingSession.session_data && typeof existingSession.session_data === 'object') {
            sessionData = existingSession.session_data;
          } else {
            sessionData = this.createDefaultSessionData();
          }
        } catch (error) {
          logger.warn('Failed to parse session_data, using default');
          sessionData = this.createDefaultSessionData();
        }
        
        return {
          id: existingSession.id,
          patientId: existingSession.patient_id,
          clinicId: existingSession.clinic_id,
          platform: existingSession.platform,
          sessionData: sessionData,
          lastActivity: existingSession.last_activity,
          isActive: existingSession.is_active
        };
      }

      const clinicId = await this.determineClinic(message);
      const defaultSessionData = this.createDefaultSessionData();
      
      const result = await this.db.query<any>(`
        INSERT INTO chat_sessions (patient_id, clinic_id, platform, session_data, is_active, last_activity)
        VALUES ($1, $2, $3, $4, $5, NOW())
        RETURNING *
      `, [
        patient.id,
        clinicId,
        message.platform,
        JSON.stringify(defaultSessionData),
        true
      ]);

      const newSession = result.rows[0];
      logger.info('New session created', { sessionId: newSession.id });
      
      return {
        id: newSession.id,
        patientId: newSession.patient_id,
        clinicId: newSession.clinic_id,
        platform: newSession.platform,
        sessionData: defaultSessionData,
        lastActivity: newSession.last_activity,
        isActive: newSession.is_active
      };
    } catch (error) {
      logger.error('Error in getOrCreateSession:', error);
      throw error;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ findPatient
  private async findPatient(message: IncomingMessage): Promise<Patient | null> {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
      const normalizedPhone = message.phone ? this.normalizePhoneNumber(message.phone) : null;
      const normalizedChatId = this.normalizeChatId(message.chatId);
      
      logger.info('Finding patient', { 
        phone: normalizedPhone, 
        chatId: normalizedChatId, 
        platform: message.platform 
      });

      // –ò—â–µ–º –ø–æ –æ–±–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      const patient = await this.db.queryOne<Patient>(`
        SELECT * FROM patients 
        WHERE (phone = $1 OR (chat_id = $2 AND platform = $3))
        LIMIT 1
      `, [normalizedPhone, normalizedChatId, message.platform]);

      if (patient) {
        logger.info('Patient found', { patientId: patient.id });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const updates: string[] = [];
        const params: any[] = [];
        let paramIndex = 1;

        if (normalizedPhone && !patient.phone) {
          updates.push(`phone = $${paramIndex}`);
          params.push(normalizedPhone);
          paramIndex++;
        }

        if (normalizedChatId && !patient.chatId) {
          updates.push(`chat_id = $${paramIndex}`);
          params.push(normalizedChatId);
          paramIndex++;
        }

        if (updates.length > 0) {
          updates.push(`updated_at = NOW()`);
          params.push(patient.id);
          
          await this.db.query(`
            UPDATE patients 
            SET ${updates.join(', ')}
            WHERE id = $${paramIndex}
          `, params);
          
          logger.info('Updated patient with missing data', { patientId: patient.id });
        }
      }

      return patient;
    } catch (error) {
      logger.error('Error finding patient:', error);
      return null;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ createPatient
  private async createPatient(message: IncomingMessage): Promise<Patient> {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const normalizedPhone = message.phone ? this.normalizePhoneNumber(message.phone) : null;
      const normalizedChatId = this.normalizeChatId(message.chatId);
      
      logger.info('Creating patient with normalized data', { 
        phone: normalizedPhone, 
        chatId: normalizedChatId, 
        platform: message.platform 
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ON CONFLICT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const result = await this.db.query<Patient>(`
        INSERT INTO patients (phone, chat_id, platform, preferred_language, created_at)
        VALUES ($1, $2, $3, $4, NOW())
        ON CONFLICT (chat_id, platform) 
        WHERE chat_id IS NOT NULL
        DO UPDATE SET
          phone = COALESCE(EXCLUDED.phone, patients.phone),
          updated_at = NOW(),
          last_activity = NOW()
        RETURNING *
      `, [
        normalizedPhone,
        normalizedChatId,
        message.platform,
        'ru'
      ]);

      if (result.rows.length > 0) {
        logger.info('Patient created/updated successfully', { 
          patientId: result.rows[0].id,
          wasUpdate: result.command === 'UPDATE'
        });
        return result.rows[0];
      }

      // Fallback: –µ—Å–ª–∏ ON CONFLICT –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
      const existingPatient = await this.findPatient(message);
      if (existingPatient) {
        logger.info('Found existing patient in fallback', { patientId: existingPatient.id });
        return existingPatient;
      }

      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      throw new Error('Failed to create or find patient');
      
    } catch (error) {
      logger.error('Error creating patient:', error);
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      const existingPatient = await this.findPatient(message);
      if (existingPatient) {
        logger.info('Recovered by finding existing patient', { patientId: existingPatient.id });
        return existingPatient;
      }
      
      throw error;
    }
  }

  // –ù–û–í–´–ô –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  private normalizePhoneNumber(phone: string): string {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    let normalized = phone.replace(/[^\d+]/g, '');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏–¥–∏—Ä—É—é—â–∏–π + –µ—Å–ª–∏ –µ—Å—Ç—å
    if (normalized.startsWith('+')) {
      normalized = normalized.substring(1);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º + –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    if (!normalized.startsWith('+') && normalized.length >= 10) {
      normalized = '+' + normalized;
    }
    
    logger.debug('Phone normalization', { original: phone, normalized });
    return normalized;
  }

  // –ù–û–í–´–ô –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ chat_id
  private normalizeChatId(chatId: string): string {
    // –î–ª—è WhatsApp chatId —ç—Ç–æ –æ–±—ã—á–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
    if (chatId && (chatId.startsWith('+') || chatId.match(/^\d{10,}$/))) {
      return this.normalizePhoneNumber(chatId);
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (Telegram) –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return chatId;
  }

  // –ù–û–í–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  public async migrateExistingPatients(): Promise<void> {
    try {
      logger.info('Starting patient data migration...');
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
      await this.db.query(`
        UPDATE patients 
        SET phone = CONCAT('+', REGEXP_REPLACE(phone, '[^0-9]', '', 'g'))
        WHERE phone IS NOT NULL 
        AND phone NOT LIKE '+%'
        AND LENGTH(REGEXP_REPLACE(phone, '[^0-9]', '', 'g')) >= 10
      `);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º chat_id –¥–ª—è WhatsApp
      await this.db.query(`
        UPDATE patients 
        SET chat_id = CONCAT('+', REGEXP_REPLACE(chat_id, '[^0-9]', '', 'g'))
        WHERE platform = 'whatsapp'
        AND chat_id IS NOT NULL 
        AND chat_id NOT LIKE '+%'
        AND LENGTH(REGEXP_REPLACE(chat_id, '[^0-9]', '', 'g')) >= 10
      `);
      
      logger.info('Patient data migration completed');
    } catch (error) {
      logger.error('Error during patient migration:', error);
    }
  }

  private async determineClinic(message: IncomingMessage): Promise<number> {
    try {
      const clinic = await this.db.queryOne<{ id: number }>(`
        SELECT id FROM clinics WHERE is_active = true LIMIT 1
      `);

      if (!clinic) {
        const anyClinic = await this.db.queryOne<{ id: number }>(`
          SELECT id FROM clinics LIMIT 1
        `);
        
        if (!anyClinic) {
          throw new Error('No clinics found');
        }
        
        return anyClinic.id;
      }

      return clinic.id;
    } catch (error) {
      logger.error('Error determining clinic:', error);
      throw error;
    }
  }

  private async getClinic(clinicId: number): Promise<Clinic | null> {
    try {
      if (!clinicId || isNaN(clinicId)) {
        logger.error('Invalid clinicId provided', { clinicId });
        return null;
      }

      const cacheKey = `clinic:${clinicId}`;
      
      try {
        const cached = await this.redis.get(cacheKey);
        if (cached) {
          return JSON.parse(cached) as Clinic;
        }
      } catch (redisError) {
        logger.warn('Redis cache error:', redisError);
      }

      const clinic = await this.db.queryOne<Clinic>(`
        SELECT * FROM clinics WHERE id = $1
      `, [clinicId]);

      if (clinic) {
        try {
          await this.redis.set(cacheKey, JSON.stringify(clinic), 1800);
        } catch (redisError) {
          logger.warn('Failed to cache clinic:', redisError);
        }
      }

      return clinic;
    } catch (error) {
      logger.error('Error getting clinic:', error);
      return null;
    }
  }

  private async updateSession(
    session: ChatSession, 
    intent: Intent, 
    response: BotResponse
  ): Promise<void> {
    try {
      if (!session.sessionData || typeof session.sessionData !== 'object') {
        session.sessionData = this.createDefaultSessionData();
      }

      const updatedContext: ExtendedConversationContext = {
        ...session.sessionData,
        lastIntent: intent.name,
        lastResponse: response.type,
        step: response.nextStep || session.sessionData.step || '',
        data: {
          ...session.sessionData.data,
          lastMessageTime: new Date()
        }
      };

      await this.db.query(`
        UPDATE chat_sessions 
        SET session_data = $1, last_activity = NOW()
        WHERE id = $2
      `, [JSON.stringify(updatedContext), session.id]);
      
      session.sessionData = updatedContext;
      
    } catch (error) {
      logger.error('Error updating session:', error);
    }
  }

  private async logMessage(sessionId: number, type: string, content: string): Promise<void> {
    try {
      await this.db.query(`
        INSERT INTO message_logs (session_id, message_type, content, created_at)
        VALUES ($1, $2, $3, NOW())
      `, [sessionId, type, content]);
    } catch (error) {
      logger.error('Error logging message:', error);
    }
  }

  private async checkRateLimit(chatId: string): Promise<void> {
    try {
      const key = `rate_limit:${chatId}`;
      const current = await this.redis.incr(key);
      
      if (current === 1) {
        await this.redis.expire(key, 60);
      }
      
      if (current > 30) {
        throw new Error('Rate limit exceeded');
      }
    } catch (error) {
      if ((error as Error).message === 'Rate limit exceeded') {
        throw error;
      }
      logger.error('Error in rate limiting:', error);
    }
  }

  private createErrorResponse(message: string): BotResponse {
    return {
      type: 'text',
      text: `‚ùå ${message}`,
      metadata: {
        error: true,
        timestamp: new Date().toISOString()
      }
    };
  }

  private extractAppointmentId(intent: Intent): number | null {
    try {
      const idEntity = intent.entities?.find(e => e.type === 'appointment_id');
      if (idEntity) {
        const id = parseInt(idEntity.value);
        return isNaN(id) ? null : id;
      }
      return null;
    } catch (error) {
      logger.error('Error extracting appointment ID:', error);
      return null;
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  public async endSession(sessionId: number): Promise<void> {
    try {
      await this.db.query(`
        UPDATE chat_sessions 
        SET is_active = false, ended_at = NOW()
        WHERE id = $1
      `, [sessionId]);
    } catch (error) {
      logger.error('Error ending session:', error);
    }
  }

  public async getSessionMetrics(sessionId: number): Promise<any> {
    try {
      const metrics = await this.db.queryOne(`
        SELECT 
          COUNT(ml.id) as message_count,
          cs.created_at as session_start,
          cs.last_activity,
          cs.session_data
        FROM chat_sessions cs
        LEFT JOIN message_logs ml ON ml.session_id = cs.id
        WHERE cs.id = $1
        GROUP BY cs.id
      `, [sessionId]);

      return metrics;
    } catch (error) {
      logger.error('Error getting session metrics:', error);
      return null;
    }
  }
}