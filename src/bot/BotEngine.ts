import { 
  IncomingMessage, 
  BotResponse, 
  ChatSession, 
  ConversationContext, 
  Intent,
  Patient,
  Clinic,
  ResponseOption
} from '@/types';
import { DatabaseService } from '@/config/database';
import { RedisService } from '@/config/redis';
import { ConversationManager } from './ConversationManager';
import { NLPService } from './NLPService';
import logger from '@/config/logger';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è ConversationContext —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
interface ExtendedConversationContext extends ConversationContext {
  lastIntent?: string;
  lastResponse?: string;
  lastMessageTime?: Date;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –∏–∑ –ë–î
interface AppointmentRow {
  id: number;
  appointment_date: Date;
  doctor_name: string;
  service_type?: string;
}

export class BotEngine {
  private db: DatabaseService;
  private redis: RedisService;
  private conversationManager: ConversationManager;
  private nlpService: NLPService;

  constructor() {
    this.db = DatabaseService.getInstance();
    this.redis = RedisService.getInstance();
    this.conversationManager = new ConversationManager();
    this.nlpService = new NLPService();
  }

  async processMessage(message: IncomingMessage): Promise<BotResponse> {
    try {
      logger.info('Processing message', { 
        platform: message.platform, 
        chatId: message.chatId,
        text: message.text?.substring(0, 100)
      });

      // 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const session = await this.getOrCreateSession(message);
      
      // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–ª–∏–Ω–∏–∫–∏
      const clinic = await this.getClinic(session.clinicId);
      if (!clinic) {
        return this.createErrorResponse('–ö–ª–∏–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
      await this.checkRateLimit(message.chatId);

      // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const intent = await this.nlpService.detectIntent(
        message.text, 
        session.sessionData,
        clinic.settings.languages?.[0] || 'ru'
      );

      // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
      const response = await this.handleIntent(intent, session, message, clinic);

      // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      await this.updateSession(session, intent, response);

      // 7. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.logMessage(session.id, 'incoming', message.text);
      await this.logMessage(session.id, 'outgoing', response.text);

      return response;

    } catch (error) {
      logger.error('Error processing message:', error);
      return this.createErrorResponse('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  private async getOrCreateSession(message: IncomingMessage): Promise<ChatSession> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ chat_id
      let patient = await this.findPatient(message);
      
      if (!patient) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        patient = await this.createPatient(message);
      }

      // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
      const existingSession = await this.db.queryOne<ChatSession>(`
        SELECT * FROM chat_sessions 
        WHERE patient_id = $1 AND platform = $2 AND is_active = true
        ORDER BY last_activity DESC LIMIT 1
      `, [patient.id, message.platform]);

      if (existingSession) {
        return existingSession;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
      const clinicId = await this.determineClinic(message);
      
      const result = await this.db.query<ChatSession>(`
        INSERT INTO chat_sessions (patient_id, clinic_id, platform, session_data, is_active, last_activity)
        VALUES ($1, $2, $3, $4, $5, NOW())
        RETURNING *
      `, [
        patient.id,
        clinicId,
        message.platform,
        JSON.stringify({
          flow: 'GREETING',
          step: 'START',
          data: {},
          retryCount: 0,
          startTime: new Date()
        }),
        true
      ]);

      if (result.rows.length === 0) {
        throw new Error('Failed to create chat session');
      }

      return result.rows[0];
    } catch (error) {
      logger.error('Error in getOrCreateSession:', error);
      throw error;
    }
  }

  private async findPatient(message: IncomingMessage): Promise<Patient | null> {
    try {
      if (message.phone) {
        return await this.db.queryOne<Patient>(
          'SELECT * FROM patients WHERE phone = $1',
          [message.phone]
        );
      }

      if (message.chatId) {
        return await this.db.queryOne<Patient>(
          'SELECT * FROM patients WHERE chat_id = $1 AND platform = $2',
          [message.chatId, message.platform]
        );
      }

      return null;
    } catch (error) {
      logger.error('Error finding patient:', error);
      return null;
    }
  }

  private async createPatient(message: IncomingMessage): Promise<Patient> {
    try {
      const result = await this.db.query<Patient>(`
        INSERT INTO patients (phone, chat_id, platform, preferred_language, created_at)
        VALUES ($1, $2, $3, $4, NOW())
        RETURNING *
      `, [
        message.phone || null,
        message.chatId,
        message.platform,
        'ru' // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
      ]);

      return result.rows[0];
    } catch (error) {
      logger.error('Error creating patient:', error);
      throw error;
    }
  }

  private async determineClinic(message: IncomingMessage): Promise<number> {
    try {
      // –í MVP –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ–¥–Ω—É –∫–ª–∏–Ω–∏–∫—É
      // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞
      const clinic = await this.db.queryOne<{ id: number }>(`
        SELECT id FROM clinics WHERE is_active = true LIMIT 1
      `);

      if (!clinic) {
        throw new Error('No active clinic found');
      }

      return clinic.id;
    } catch (error) {
      logger.error('Error determining clinic:', error);
      throw error;
    }
  }

  private async getClinic(clinicId: number): Promise<Clinic | null> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cacheKey = `clinic:${clinicId}`;
      const cached = await this.redis.get(cacheKey);
      
      if (cached) {
        return JSON.parse(cached) as Clinic;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
      const clinic = await this.db.queryOne<Clinic>(`
        SELECT * FROM clinics WHERE id = $1 AND is_active = true
      `, [clinicId]);

      if (clinic) {
        // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç
        await this.redis.set(cacheKey, JSON.stringify(clinic), 1800);
      }

      return clinic;
    } catch (error) {
      logger.error('Error getting clinic:', error);
      return null;
    }
  }

  private async handleIntent(
    intent: Intent, 
    session: ChatSession, 
    message: IncomingMessage,
    clinic: Clinic
  ): Promise<BotResponse> {
    
    try {
      logger.info('Handling intent', { 
        intent: intent.name, 
        confidence: intent.confidence,
        sessionId: session.id 
      });

      switch (intent.name) {
        case 'GREETING':
          return await this.handleGreeting(session, clinic);
        
        case 'BOOK_APPOINTMENT':
          return await this.conversationManager.handleBookingFlow(session, intent, clinic);
        
        case 'CANCEL_APPOINTMENT':
          return await this.handleCancellation(session, intent);
        
        case 'CONFIRM_APPOINTMENT':
          return await this.handleConfirmation(session, intent);
        
        case 'GET_INFO':
          return await this.handleInfoRequest(session, intent, clinic);
        
        case 'CHANGE_LANGUAGE':
          return await this.handleLanguageChange(session, intent);
        
        case 'FALLBACK':
          return await this.handleFallback(session, message.text);
        
        default:
          return await this.conversationManager.handleCurrentFlow(session, message.text, clinic);
      }
    } catch (error) {
      logger.error('Error handling intent:', error);
      return this.createErrorResponse('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  private async handleGreeting(session: ChatSession, clinic: Clinic): Promise<BotResponse> {
    try {
      const patient = await this.db.queryOne<Patient>(`
        SELECT * FROM patients WHERE id = $1
      `, [session.patientId]);

      const greeting = patient?.name 
        ? `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${patient.name}!` 
        : '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!';

      const options: ResponseOption[] = [
        { id: 'book', text: 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º', value: 'book_appointment' },
        { id: 'info', text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–µ', value: 'clinic_info' },
        { id: 'services', text: 'ü¶∑ –ù–∞—à–∏ —É—Å–ª—É–≥–∏', value: 'services_info' },
        { id: 'contact', text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', value: 'contact_info' }
      ];

      return {
        type: 'keyboard',
        text: `${greeting} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–Ω–∏–∫—É "${clinic.name}". –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`,
        options,
        nextStep: 'MAIN_MENU'
      };
    } catch (error) {
      logger.error('Error in handleGreeting:', error);
      return this.createErrorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.');
    }
  }

  private async handleCancellation(session: ChatSession, intent: Intent): Promise<BotResponse> {
    try {
      // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      const appointments = await this.db.query<AppointmentRow>(`
        SELECT a.*, d.name as doctor_name 
        FROM appointments a
        JOIN doctors d ON a.doctor_id = d.id
        WHERE a.patient_id = $1 
        AND a.status IN ('scheduled', 'confirmed')
        AND a.appointment_date > NOW()
        ORDER BY a.appointment_date
      `, [session.patientId]);

      if (appointments.rows.length === 0) {
        return {
          type: 'text',
          text: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
        };
      }

      const options: ResponseOption[] = appointments.rows.map((apt: AppointmentRow) => ({
        id: apt.id.toString(),
        text: `${this.formatDate(apt.appointment_date)} - ${apt.doctor_name}`,
        value: `cancel_${apt.id}`,
        description: apt.service_type
      }));

      return {
        type: 'list',
        text: '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:',
        options
      };
    } catch (error) {
      logger.error('Error in handleCancellation:', error);
      return this.createErrorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π.');
    }
  }

  private async handleConfirmation(session: ChatSession, intent: Intent): Promise<BotResponse> {
    try {
      // –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
      const appointmentId = this.extractAppointmentId(intent);
      
      if (appointmentId) {
        const result = await this.db.query(`
          UPDATE appointments 
          SET confirmed = true, status = 'confirmed', updated_at = NOW()
          WHERE id = $1 AND patient_id = $2
          RETURNING *
        `, [appointmentId, session.patientId]);

        if (result.rows.length > 0) {
          return {
            type: 'text',
            text: '‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.'
          };
        }
      }

      return {
        type: 'text',
        text: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
      };
    } catch (error) {
      logger.error('Error in handleConfirmation:', error);
      return this.createErrorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.');
    }
  }

  private async handleInfoRequest(session: ChatSession, intent: Intent, clinic: Clinic): Promise<BotResponse> {
    try {
      return {
        type: 'text',
        text: `üè• –ö–ª–∏–Ω–∏–∫–∞: ${clinic.name}\n` +
              `üìç –ê–¥—Ä–µ—Å: ${clinic.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
              `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${clinic.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
              `–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è!`
      };
    } catch (error) {
      logger.error('Error in handleInfoRequest:', error);
      return this.createErrorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–Ω–∏–∫–µ.');
    }
  }

  private async handleLanguageChange(session: ChatSession, intent: Intent): Promise<BotResponse> {
    try {
      const options: ResponseOption[] = [
        { id: 'ru', text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', value: 'lang_ru' },
        { id: 'kz', text: 'üá∞üáø “ö–∞–∑–∞“õ—à–∞', value: 'lang_kz' },
        { id: 'en', text: 'üá∫üá∏ English', value: 'lang_en' }
      ];

      return {
        type: 'keyboard',
        text: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / Choose language:',
        options
      };
    } catch (error) {
      logger.error('Error in handleLanguageChange:', error);
      return this.createErrorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞.');
    }
  }

  private async handleFallback(session: ChatSession, text: string): Promise<BotResponse> {
    try {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–æ–≤
      const sessionData = session.sessionData;
      sessionData.retryCount = (sessionData.retryCount || 0) + 1;

      if (sessionData.retryCount > 3) {
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —á–µ–ª–æ–≤–µ–∫–∞
        return {
          type: 'text',
          text: 'üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –°–µ–π—á–∞—Å —è –ø–µ—Ä–µ–≤–µ–¥—É –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
        };
      }

      const options: ResponseOption[] = [
        { id: 'book', text: 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º', value: 'book_appointment' },
        { id: 'info', text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', value: 'clinic_info' },
        { id: 'help', text: '‚ùì –ü–æ–º–æ—â—å', value: 'help' }
      ];

      return {
        type: 'keyboard',
        text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:',
        options
      };
    } catch (error) {
      logger.error('Error in handleFallback:', error);
      return this.createErrorResponse('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  }

  private async updateSession(
    session: ChatSession, 
    intent: Intent, 
    response: BotResponse
  ): Promise<void> {
    try {
      const updatedContext: ExtendedConversationContext = {
        ...session.sessionData,
        lastIntent: intent.name,
        lastResponse: response.type,
        step: response.nextStep || session.sessionData.step,
        data: {
          ...session.sessionData.data,
          lastMessageTime: new Date()
        }
      };

      await this.db.query(`
        UPDATE chat_sessions 
        SET session_data = $1, last_activity = NOW()
        WHERE id = $2
      `, [JSON.stringify(updatedContext), session.id]);
    } catch (error) {
      logger.error('Error updating session:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    }
  }

  private async logMessage(sessionId: number, type: string, content: string): Promise<void> {
    try {
      await this.db.query(`
        INSERT INTO message_logs (session_id, message_type, content, created_at)
        VALUES ($1, $2, $3, NOW())
      `, [sessionId, type, content]);
    } catch (error) {
      logger.error('Error logging message:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    }
  }

  private async checkRateLimit(chatId: string): Promise<void> {
    try {
      const key = `rate_limit:${chatId}`;
      const current = await this.redis.incr(key);
      
      if (current === 1) {
        await this.redis.expire(key, 60); // 1 minute window
      }
      
      if (current > 30) { // max 30 messages per minute
        throw new Error('Rate limit exceeded');
      }
    } catch (error) {
      if ((error as Error).message === 'Rate limit exceeded') {
        throw error;
      }
      logger.error('Error in rate limiting:', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ Redis –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    }
  }

  private createErrorResponse(message: string): BotResponse {
    return {
      type: 'text',
      text: `‚ùå ${message}`,
      metadata: {
        error: true,
        timestamp: new Date().toISOString()
      }
    };
  }

  private extractAppointmentId(intent: Intent): number | null {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π intent
      const idEntity = intent.entities?.find(e => e.type === 'appointment_id');
      if (idEntity) {
        const id = parseInt(idEntity.value);
        return isNaN(id) ? null : id;
      }
      return null;
    } catch (error) {
      logger.error('Error extracting appointment ID:', error);
      return null;
    }
  }

  private formatDate(date: Date | string): string {
    try {
      const dateObj = typeof date === 'string' ? new Date(date) : date;
      return new Intl.DateTimeFormat('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }).format(dateObj);
    } catch (error) {
      logger.error('Error formatting date:', error);
      return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
  public async endSession(sessionId: number): Promise<void> {
    try {
      await this.db.query(`
        UPDATE chat_sessions 
        SET is_active = false, ended_at = NOW()
        WHERE id = $1
      `, [sessionId]);
    } catch (error) {
      logger.error('Error ending session:', error);
    }
  }

  public async getSessionMetrics(sessionId: number): Promise<any> {
    try {
      const metrics = await this.db.queryOne(`
        SELECT 
          COUNT(ml.id) as message_count,
          cs.created_at as session_start,
          cs.last_activity,
          cs.session_data
        FROM chat_sessions cs
        LEFT JOIN message_logs ml ON ml.session_id = cs.id
        WHERE cs.id = $1
        GROUP BY cs.id
      `, [sessionId]);

      return metrics;
    } catch (error) {
      logger.error('Error getting session metrics:', error);
      return null;
    }
  }
}