import TelegramBot from 'node-telegram-bot-api';
import { IncomingMessage, BotResponse, ResponseOption } from '@/types';
import { BotEngine } from '@/bot/BotEngine';
import logger from '@/config/logger';

export class TelegramService {
  private bot: TelegramBot;
  private botEngine: BotEngine;
  private isPolling: boolean = false;

  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token || token === 'your-telegram-bot-token') {
      throw new Error('Telegram bot token not configured');
    }

    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ polling
    this.bot = new TelegramBot(token, { polling: false });
    this.botEngine = new BotEngine();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º polling —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π
    this.startPolling();
  }

  private async startPolling(): Promise<void> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      await this.bot.getMe();
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –∑–∞–ø—É—Å–∫–∞–µ–º polling
      await this.bot.startPolling();
      this.isPolling = true;
      
      this.setupHandlers();
      logger.info('Telegram bot started successfully with polling');
    } catch (error) {
      logger.error('Failed to start Telegram polling:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
  }

  private setupHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      if (msg.text && !msg.text.startsWith('/')) {
        await this.processTextMessage(msg);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    this.bot.on('callback_query', async (query) => {
      await this.processCallbackQuery(query);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    this.bot.onText(/\/start/, async (msg) => {
      await this.processTextMessage(msg, '–ø—Ä–∏–≤–µ—Ç');
    });

    this.bot.onText(/\/help/, async (msg) => {
      await this.sendHelpMessage(msg.chat.id);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      logger.error('Telegram bot error:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
    this.bot.on('polling_error', (error) => {
      logger.error('Telegram polling error:', error);
    });
  }

  private async processTextMessage(msg: TelegramBot.Message, customText?: string): Promise<void> {
    const chatId = msg.chat.id;
    const text = customText || msg.text || '';

    const incomingMessage: IncomingMessage = {
      platform: 'telegram',
      chatId: chatId.toString(),
      text,
      messageId: msg.message_id.toString(),
      timestamp: new Date(msg.date * 1000)
    };

    logger.info('Processing Telegram message', {
      chatId,
      text: text.substring(0, 100)
    });

    try {
      const response = await this.botEngine.processMessage(incomingMessage);
      await this.sendResponse(chatId, response);
    } catch (error) {
      logger.error('Error processing Telegram message:', error);
      await this.sendErrorMessage(chatId);
    }
  }

  private async processCallbackQuery(query: TelegramBot.CallbackQuery): Promise<void> {
    const chatId = query.message?.chat.id;
    const data = query.data;

    if (!chatId || !data) return;

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await this.bot.answerCallbackQuery(query.id);

    const incomingMessage: IncomingMessage = {
      platform: 'telegram',
      chatId: chatId.toString(),
      text: data,
      messageId: query.message?.message_id.toString(),
      timestamp: new Date(),
      isButton: true,
      buttonData: data
    };

    try {
      const response = await this.botEngine.processMessage(incomingMessage);
      await this.sendResponse(chatId, response);
    } catch (error) {
      logger.error('Error processing Telegram callback:', error);
      await this.sendErrorMessage(chatId);
    }
  }

  async sendResponse(chatId: number, response: BotResponse): Promise<void> {
    try {
      switch (response.type) {
        case 'text':
          await this.bot.sendMessage(chatId, response.text);
          break;
          
        case 'keyboard':
        case 'list':
          const keyboard = this.createInlineKeyboard(response.options || []);
          await this.bot.sendMessage(chatId, response.text, {
            reply_markup: { inline_keyboard: keyboard }
          });
          break;
          
        default:
          await this.bot.sendMessage(chatId, response.text);
      }
    } catch (error) {
      logger.error('Error sending Telegram response:', error);
      throw error;
    }
  }

  private createInlineKeyboard(options: ResponseOption[]): TelegramBot.InlineKeyboardButton[][] {
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [];
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for (let i = 0; i < options.length; i += 2) {
      const row: TelegramBot.InlineKeyboardButton[] = [];
      
      row.push({
        text: options[i].text,
        callback_data: options[i].value
      });
      
      if (i + 1 < options.length) {
        row.push({
          text: options[i + 1].text,
          callback_data: options[i + 1].value
        });
      }
      
      keyboard.push(row);
    }
    
    return keyboard;
  }

  private async sendHelpMessage(chatId: number): Promise<void> {
    const helpText = `
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞!

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:
üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º
‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–Ω–∏–∫–µ
üìû –£–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.
    `;

    await this.bot.sendMessage(chatId, helpText.trim());
  }

  private async sendErrorMessage(chatId: number): Promise<void> {
    await this.bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∫–ª–∏–Ω–∏–∫—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.'
    );
  }

  async healthCheck(): Promise<boolean> {
    try {
      const me = await this.bot.getMe();
      logger.debug('Telegram bot health check passed', { username: me.username });
      return true;
    } catch (error) {
      logger.error('Telegram health check failed:', error);
      return false;
    }
  }

  async stop(): Promise<void> {
    if (this.isPolling) {
      this.bot.stopPolling();
      this.isPolling = false;
    }
    logger.info('Telegram bot stopped');
  }
}