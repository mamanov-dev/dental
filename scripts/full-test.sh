#!/bin/bash

# =================== scripts/full-test.sh ===================

echo "üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞"
echo "=============================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1"
    else
        echo "‚ùå $1"
        exit 1
    fi
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

# Node.js
node --version > /dev/null 2>&1
check_status "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(node --version)"

# Docker
docker --version > /dev/null 2>&1
check_status "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version | head -n1)"

# npm –ø–∞–∫–µ—Ç—ã
if [ -d "node_modules" ]; then
    echo "‚úÖ npm –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –ø–∞–∫–µ—Ç–æ–≤..."
    npm install
    check_status "npm –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo ""
echo "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

if [ -f ".env" ]; then
    echo "‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    source .env
    
    if [ -n "$DATABASE_URL" ]; then
        echo "‚úÖ DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        echo "‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
    fi
    
    if [ -n "$JWT_SECRET" ]; then
        echo "‚úÖ JWT_SECRET –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        echo "‚ùå JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
        exit 1
    fi
    
    if [ -n "$API_KEY" ]; then
        echo "‚úÖ API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        echo "‚ùå API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
        exit 1
    fi
    
else
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run setup"
    exit 1
fi

# 3. –ó–∞–ø—É—Å–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo ""
echo "3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

echo "üóÑÔ∏è –ó–∞–ø—É—Å–∫ PostgreSQL –∏ Redis..."
docker-compose up -d db redis
sleep 5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
until docker-compose exec -T db pg_isready -U dental_user -d dental_bot > /dev/null 2>&1; do
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL..."
    sleep 2
done
check_status "PostgreSQL –≥–æ—Ç–æ–≤"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
docker-compose exec -T redis redis-cli ping > /dev/null 2>&1
check_status "Redis –≥–æ—Ç–æ–≤"

# 4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
echo ""
echo "4Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
npm run db:migrate > /dev/null 2>&1
check_status "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"

npm run db:seed > /dev/null 2>&1
check_status "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"

# 5. –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo ""
echo "5Ô∏è‚É£ –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
npm run build > /dev/null 2>&1
check_status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ"

# 6. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
echo ""
echo "6Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
npm start > logs/test.log 2>&1 &
APP_PID=$!

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
sleep 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
if kill -0 $APP_PID 2>/dev/null; then
    echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (PID: $APP_PID)"
else
    echo "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å"
    cat logs/test.log
    exit 1
fi

# 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
echo ""
echo "7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."

# Health check
HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health)
if [ "$HEALTH_RESPONSE" = "200" ]; then
    echo "‚úÖ Health check –ø—Ä–æ—à–µ–ª"
else
    echo "‚ùå Health check –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è (HTTP $HEALTH_RESPONSE)"
    kill $APP_PID
    exit 1
fi

# API —Å—Ç–∞—Ç—É—Å
API_RESPONSE=$(curl -s -H "X-API-Key: $API_KEY" http://localhost:3000/api/v1/status)
if echo "$API_RESPONSE" | grep -q '"success":true'; then
    echo "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    echo "–û—Ç–≤–µ—Ç: $API_RESPONSE"
    kill $APP_PID
    exit 1
fi

# –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
APPOINTMENT_DATA='{
    "doctorId": 1,
    "patientPhone": "+77011234567",
    "patientName": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç",
    "appointmentDate": "'$(date -d '+1 day' -Iseconds)'",
    "serviceType": "consultation",
    "notes": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç"
}'

APPOINTMENT_RESPONSE=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "X-API-Key: $API_KEY" \
    -d "$APPOINTMENT_DATA" \
    http://localhost:3000/api/v1/appointments)

if echo "$APPOINTMENT_RESPONSE" | grep -q '"success":true'; then
    APPOINTMENT_ID=$(echo "$APPOINTMENT_RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2)
    echo "‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ (ID: $APPOINTMENT_ID)"
else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å"
    echo "–û—Ç–≤–µ—Ç: $APPOINTMENT_RESPONSE"
    kill $APP_PID
    exit 1
fi

# 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook'–æ–≤
echo ""
echo "8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook'–æ–≤..."

# WhatsApp webhook verification
WEBHOOK_VERIFY_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
    "http://localhost:3000/webhook/whatsapp?hub.mode=subscribe&hub.verify_token=$WHATSAPP_WEBHOOK_VERIFY_TOKEN&hub.challenge=test123")

if [ "$WEBHOOK_VERIFY_RESPONSE" = "200" ]; then
    echo "‚úÖ WhatsApp webhook verification"
else
    echo "‚ö†Ô∏è WhatsApp webhook verification –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã)"
fi

# –¢–µ—Å—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è WhatsApp
WHATSAPP_MESSAGE='{
    "object": "whatsapp_business_account",
    "entry": [{
        "changes": [{
            "field": "messages",
            "value": {
                "messages": [{
                    "from": "77011234567",
                    "id": "test_msg_'$(date +%s)'",
                    "timestamp": "'$(date +%s)'",
                    "text": {"body": "–ø—Ä–∏–≤–µ—Ç"},
                    "type": "text"
                }],
                "contacts": [{
                    "wa_id": "77011234567",
                    "profile": {"name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
                }]
            }
        }]
    }]
}'

WHATSAPP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
    -X POST \
    -H "Content-Type: application/json" \
    -d "$WHATSAPP_MESSAGE" \
    http://localhost:3000/webhook/whatsapp)

if [ "$WHATSAPP_RESPONSE" = "200" ]; then
    echo "‚úÖ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
else
    echo "‚ùå WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (HTTP $WHATSAPP_RESPONSE)"
fi

# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
echo ""
echo "9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤..."

if [ -f "logs/combined.log" ]; then
    LOG_LINES=$(wc -l < logs/combined.log)
    echo "‚úÖ –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è ($LOG_LINES —Å—Ç—Ä–æ–∫)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    ERROR_COUNT=$(grep -c "ERROR" logs/combined.log 2>/dev/null || echo "0")
    if [ "$ERROR_COUNT" -gt 0 ]; then
        echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $ERROR_COUNT –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
        echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:"
        grep "ERROR" logs/combined.log | tail -3
    else
        echo "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    fi
else
    echo "‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
echo ""
echo "üîü –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."

# –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç health endpoint
echo "üìä –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç (100 –∑–∞–ø—Ä–æ—Å–æ–≤)..."
for i in {1..100}; do
    curl -s http://localhost:3000/health > /dev/null &
done
wait

sleep 2

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
if kill -0 $APP_PID 2>/dev/null; then
    echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–¥–µ—Ä–∂–∞–ª–æ –Ω–∞–≥—Ä—É–∑–∫—É"
else
    echo "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø–∞–ª–æ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
if command -v ps &> /dev/null; then
    MEMORY_USAGE=$(ps -p $APP_PID -o rss= 2>/dev/null || echo "0")
    MEMORY_MB=$((MEMORY_USAGE / 1024))
    echo "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEMORY_MB}MB"
    
    if [ "$MEMORY_MB" -gt 500 ]; then
        echo "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"
    else
        echo "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ"
    fi
fi

# 11. Cleanup
echo ""
echo "üßπ –û—á–∏—Å—Ç–∫–∞..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
kill $APP_PID 2>/dev/null
sleep 2

# –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if kill -0 $APP_PID 2>/dev/null; then
    kill -9 $APP_PID 2>/dev/null
fi

echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
echo ""
echo "üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢"
echo "=================="
echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: OK"
echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: OK" 
echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK"
echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏: OK"
echo "‚úÖ –°–±–æ—Ä–∫–∞: OK"
echo "‚úÖ API: OK"
echo "‚úÖ Webhook'–∏: OK"
echo "‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: OK"
echo "‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: OK"
echo ""
echo "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
echo ""
echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã WhatsApp –∏ Telegram –≤ .env"
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ: npm run prod"
echo "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã"
echo "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
echo ""
echo "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "- npm run dev           : –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
echo "- npm run test:bot      : –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"
echo "- npm run logs          : –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "- npm run health        : –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"

# =================== scripts/production-deploy.sh ===================

#!/bin/bash

echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"
echo "=============================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥–∞–∫—à–Ω
if [ "$NODE_ENV" != "production" ]; then
    echo "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã"
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export NODE_ENV=production"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
REQUIRED_VARS=(
    "DATABASE_URL"
    "REDIS_URL" 
    "JWT_SECRET"
    "ENCRYPTION_KEY"
    "WHATSAPP_ACCESS_TOKEN"
    "WHATSAPP_PHONE_NUMBER_ID"
)

for var in "${REQUIRED_VARS[@]}"; do
    if [ -z "${!var}" ]; then
        echo "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        exit 1
    fi
done

echo "‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –°–æ–∑–¥–∞–µ–º backup –ë–î
echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
pg_dump "$DATABASE_URL" > "$BACKUP_FILE"
echo "‚úÖ Backup —Å–æ–∑–¥–∞–Ω: $BACKUP_FILE"

# –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
echo "üîß –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
npm ci --only=production
npm run build

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
echo "üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
npm run db:migrate

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
npm start

echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"