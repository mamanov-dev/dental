Write-Host "üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞" -ForegroundColor Green
Write-Host "==============================================`n" -ForegroundColor Green

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
function Test-Status {
    param($Description, $ExitCode = $LASTEXITCODE)
    if ($ExitCode -eq 0) {
        Write-Host "‚úÖ $Description" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚ùå $Description" -ForegroundColor Red
        return $false
    }
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
Write-Host "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." -ForegroundColor Cyan

# Node.js
try {
    $nodeVersion = node --version
    Test-Status "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $nodeVersion"
} catch {
    Test-Status "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" 1
    exit 1
}

# Docker
try {
    $dockerVersion = docker --version
    Test-Status "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $dockerVersion"
} catch {
    Test-Status "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" 1
    exit 1
}

# npm –ø–∞–∫–µ—Ç—ã
if (Test-Path "node_modules") {
    Test-Status "npm –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
} else {
    Write-Host "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –ø–∞–∫–µ—Ç–æ–≤..." -ForegroundColor Yellow
    npm install
    Test-Status "npm –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
Write-Host "`n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." -ForegroundColor Cyan

if (Test-Path ".env") {
    Test-Status "–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
    Get-Content ".env" | ForEach-Object {
        if ($_ -match "^([^#][^=]+)=(.*)$") {
            [Environment]::SetEnvironmentVariable($matches[1], $matches[2], "Process")
        }
    }
    
    $requiredVars = @("DATABASE_URL", "JWT_SECRET", "API_KEY")
    foreach ($var in $requiredVars) {
        $value = [Environment]::GetEnvironmentVariable($var, "Process")
        if ($value) {
            Test-Status "$var –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        } else {
            Test-Status "$var –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env" 1
            exit 1
        }
    }
} else {
    Test-Status "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω" 1
    Write-Host "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\scripts\setup.ps1" -ForegroundColor Yellow
    exit 1
}

# 3. –ó–∞–ø—É—Å–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
Write-Host "`n3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." -ForegroundColor Cyan

Write-Host "üóÑÔ∏è –ó–∞–ø—É—Å–∫ PostgreSQL –∏ Redis..." -ForegroundColor Yellow
docker-compose up -d db redis
Start-Sleep -Seconds 5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
$maxAttempts = 15
$attempt = 0
do {
    $attempt++
    try {
        docker-compose exec -T db pg_isready -U dental_user -d dental_bot 2>$null | Out-Null
        if ($LASTEXITCODE -eq 0) {
            Test-Status "PostgreSQL –≥–æ—Ç–æ–≤"
            break
        }
    } catch {}
    
    if ($attempt -ge $maxAttempts) {
        Test-Status "PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è" 1
        exit 1
    }
    
    Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL... (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$maxAttempts)" -ForegroundColor Yellow
    Start-Sleep -Seconds 2
} while ($true)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
try {
    docker-compose exec -T redis redis-cli ping 2>$null | Out-Null
    Test-Status "Redis –≥–æ—Ç–æ–≤"
} catch {
    Test-Status "Redis –Ω–µ –≥–æ—Ç–æ–≤" 1
    exit 1
}

# 4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
Write-Host "`n4Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..." -ForegroundColor Cyan
npm run db:migrate 2>$null | Out-Null
Test-Status "–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"

npm run db:seed 2>$null | Out-Null
Test-Status "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"

# 5. –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Write-Host "`n5Ô∏è‚É£ –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..." -ForegroundColor Cyan
npm run build 2>$null | Out-Null
Test-Status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ"

# 6. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
Write-Host "`n6Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..." -ForegroundColor Cyan

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
$appProcess = Start-Process -FilePath "npm" -ArgumentList "start" -RedirectStandardOutput "logs\test.log" -RedirectStandardError "logs\test-error.log" -PassThru -WindowStyle Hidden

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
Start-Sleep -Seconds 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
if ($appProcess -and !$appProcess.HasExited) {
    Test-Status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (PID: $($appProcess.Id))"
} else {
    Test-Status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å" 1
    if (Test-Path "logs\test-error.log") {
        Write-Host "–õ–æ–≥–∏ –æ—à–∏–±–æ–∫:" -ForegroundColor Yellow
        Get-Content "logs\test-error.log" | Select-Object -Last 10
    }
    exit 1
}

# 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
Write-Host "`n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..." -ForegroundColor Cyan

# Health check
try {
    $healthResponse = Invoke-WebRequest -Uri "http://localhost:3000/health" -Method GET -TimeoutSec 10
    if ($healthResponse.StatusCode -eq 200) {
        Test-Status "Health check –ø—Ä–æ—à–µ–ª"
    } else {
        Test-Status "Health check –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è (HTTP $($healthResponse.StatusCode))" 1
        $appProcess | Stop-Process -Force
        exit 1
    }
} catch {
    Test-Status "Health check –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: $($_.Exception.Message)" 1
    $appProcess | Stop-Process -Force
    exit 1
}

# API —Å—Ç–∞—Ç—É—Å
try {
    $apiKey = [Environment]::GetEnvironmentVariable("API_KEY", "Process")
    $headers = @{ "X-API-Key" = $apiKey }
    $apiResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/v1/status" -Method GET -Headers $headers -TimeoutSec 10
    
    if ($apiResponse.success -eq $true) {
        Test-Status "API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    } else {
        Test-Status "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç" 1
        $appProcess | Stop-Process -Force
        exit 1
    }
} catch {
    Test-Status "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: $($_.Exception.Message)" 1
    $appProcess | Stop-Process -Force
    exit 1
}

# –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
try {
    $tomorrow = (Get-Date).AddDays(1).ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
    $appointmentData = @{
        doctorId = 1
        patientPhone = "+77011234567"
        patientName = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç"
        appointmentDate = $tomorrow
        serviceType = "consultation"
        notes = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç"
    } | ConvertTo-Json
    
    $headers = @{ 
        "Content-Type" = "application/json"
        "X-API-Key" = $apiKey 
    }
    
    $appointmentResponse = Invoke-RestMethod -Uri "http://localhost:3000/api/v1/appointments" -Method POST -Body $appointmentData -Headers $headers -TimeoutSec 10
    
    if ($appointmentResponse.success -eq $true) {
        Test-Status "–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ (ID: $($appointmentResponse.data.id))"
    } else {
        Test-Status "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å" 1
        Write-Host "–û—Ç–≤–µ—Ç: $($appointmentResponse | ConvertTo-Json)" -ForegroundColor Yellow
        $appProcess | Stop-Process -Force
        exit 1
    }
} catch {
    Test-Status "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å: $($_.Exception.Message)" 1
    $appProcess | Stop-Process -Force
    exit 1
}

# 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook'–æ–≤
Write-Host "`n8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook'–æ–≤..." -ForegroundColor Cyan

# WhatsApp webhook verification
try {
    $webhookToken = [Environment]::GetEnvironmentVariable("WHATSAPP_WEBHOOK_VERIFY_TOKEN", "Process")
    $webhookUrl = "http://localhost:3000/webhook/whatsapp?hub.mode=subscribe&hub.verify_token=$webhookToken&hub.challenge=test123"
    $webhookResponse = Invoke-WebRequest -Uri $webhookUrl -Method GET -TimeoutSec 10
    
    if ($webhookResponse.StatusCode -eq 200) {
        Test-Status "WhatsApp webhook verification"
    } else {
        Test-Status "WhatsApp webhook verification –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã)" 0
    }
} catch {
    Test-Status "WhatsApp webhook verification –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω—ã)" 0
}

# –¢–µ—Å—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è WhatsApp
try {
    $whatsappMessage = @{
        object = "whatsapp_business_account"
        entry = @(@{
            changes = @(@{
                field = "messages"
                value = @{
                    messages = @(@{
                        from = "77011234567"
                        id = "test_msg_$(Get-Date -Format 'yyyyMMddHHmmss')"
                        timestamp = [DateTimeOffset]::UtcNow.ToUnixTimeSeconds().ToString()
                        text = @{ body = "–ø—Ä–∏–≤–µ—Ç" }
                        type = "text"
                    })
                    contacts = @(@{
                        wa_id = "77011234567"
                        profile = @{ name = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" }
                    })
                }
            })
        })
    } | ConvertTo-Json -Depth 10
    
    $headers = @{ "Content-Type" = "application/json" }
    $whatsappResponse = Invoke-WebRequest -Uri "http://localhost:3000/webhook/whatsapp" -Method POST -Body $whatsappMessage -Headers $headers -TimeoutSec 10
    
    if ($whatsappResponse.StatusCode -eq 200) {
        Test-Status "WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
    } else {
        Test-Status "WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (HTTP $($whatsappResponse.StatusCode))" 1
    }
} catch {
    Test-Status "WhatsApp —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: $($_.Exception.Message)" 1
}

# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
Write-Host "`n9Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤..." -ForegroundColor Cyan

if (Test-Path "logs\combined.log") {
    $logLines = (Get-Content "logs\combined.log").Count
    Test-Status "–õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è ($logLines —Å—Ç—Ä–æ–∫)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    $errorLines = Get-Content "logs\combined.log" | Select-String "ERROR"
    if ($errorLines.Count -gt 0) {
        Write-Host "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $($errorLines.Count) –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö" -ForegroundColor Yellow
        Write-Host "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:" -ForegroundColor Yellow
        $errorLines | Select-Object -Last 3 | ForEach-Object { Write-Host $_.Line -ForegroundColor Red }
    } else {
        Test-Status "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    }
} else {
    Test-Status "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω" 0
}

# 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
Write-Host "`nüîü –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..." -ForegroundColor Cyan

# –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç health endpoint
Write-Host "üìä –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç (50 –∑–∞–ø—Ä–æ—Å–æ–≤)..." -ForegroundColor Yellow

$jobs = @()
for ($i = 1; $i -le 50; $i++) {
    $jobs += Start-Job -ScriptBlock {
        try {
            Invoke-WebRequest -Uri "http://localhost:3000/health" -Method GET -TimeoutSec 5 | Out-Null
        } catch {}
    }
}

# –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
$jobs | Wait-Job | Out-Null
$jobs | Remove-Job

Start-Sleep -Seconds 2

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
if ($appProcess -and !$appProcess.HasExited) {
    Test-Status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–¥–µ—Ä–∂–∞–ª–æ –Ω–∞–≥—Ä—É–∑–∫—É"
} else {
    Test-Status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø–∞–ª–æ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π" 1
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
try {
    $memoryUsage = (Get-Process -Id $appProcess.Id).WorkingSet64 / 1MB
    Write-Host "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $([math]::Round($memoryUsage, 2))MB" -ForegroundColor Cyan
    
    if ($memoryUsage -gt 500) {
        Test-Status "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏" 0
    } else {
        Test-Status "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ"
    }
} catch {
    Write-Host "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–º—è—Ç–∏" -ForegroundColor Yellow
}

# 11. Cleanup
Write-Host "`nüßπ –û—á–∏—Å—Ç–∫–∞..." -ForegroundColor Cyan

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if ($appProcess -and !$appProcess.HasExited) {
    $appProcess | Stop-Process -Force
    Start-Sleep -Seconds 2
}

Test-Status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
Write-Host "`nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢" -ForegroundColor Green
Write-Host "==================" -ForegroundColor Green
Write-Host "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: OK" -ForegroundColor Green
Write-Host "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: OK" -ForegroundColor Green
Write-Host "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK" -ForegroundColor Green
Write-Host "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏: OK" -ForegroundColor Green
Write-Host "‚úÖ –°–±–æ—Ä–∫–∞: OK" -ForegroundColor Green
Write-Host "‚úÖ API: OK" -ForegroundColor Green
Write-Host "‚úÖ Webhook'–∏: OK" -ForegroundColor Green
Write-Host "‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: OK" -ForegroundColor Green
Write-Host "‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: OK" -ForegroundColor Green
Write-Host ""
Write-Host "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!" -ForegroundColor Green
Write-Host ""
Write-Host "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Cyan
Write-Host "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã WhatsApp –∏ Telegram –≤ .env" -ForegroundColor White
Write-Host "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ: npm run prod" -ForegroundColor White
Write-Host "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã" -ForegroundColor White
Write-Host "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" -ForegroundColor White
Write-Host ""
Write-Host "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor Cyan
Write-Host "- npm run dev                    : –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" -ForegroundColor White
Write-Host "- npm run test:bot               : –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API" -ForegroundColor White
Write-Host "- Get-Content logs\combined.log  : –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤" -ForegroundColor White
Write-Host "- npm run health                 : –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è" -ForegroundColor White
