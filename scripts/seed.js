const { Pool } = require('pg');
require('dotenv').config();

async function seedDatabase() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL
  });

  try {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–ª–∏–Ω–∏–∫—É
    const clinicResult = await pool.query(`
      INSERT INTO clinics (name, phone, address, settings) 
      VALUES ($1, $2, $3, $4)
      ON CONFLICT DO NOTHING
      RETURNING id
    `, [
      '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è "–ë–µ–ª—ã–π –∑—É–±"',
      '+77012345678',
      '–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è, 123',
      JSON.stringify({
        workingHours: {
          monday: { start: '09:00', end: '18:00' },
          tuesday: { start: '09:00', end: '18:00' },
          wednesday: { start: '09:00', end: '18:00' },
          thursday: { start: '09:00', end: '18:00' },
          friday: { start: '09:00', end: '18:00' },
          saturday: { start: '10:00', end: '16:00' },
          sunday: null
        },
        appointmentDuration: 60,
        maxAdvanceBookingDays: 30,
        reminderSettings: {
          enabled: true,
          times: [
            { hours: 24, message: '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –∑–∞–≤—Ç—Ä–∞' },
            { hours: 2, message: '–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É –≤–∞—Å –ø—Ä–∏–µ–º' }
          ],
          channels: ['whatsapp', 'telegram']
        },
        autoConfirmation: false,
        languages: ['ru', 'kz'],
        services: [
          { id: 'consultation', name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', duration: 30, price: 5000 },
          { id: 'cleaning', name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞', duration: 60, price: 15000 },
          { id: 'treatment', name: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞', duration: 90, price: 25000 },
          { id: 'prosthetics', name: '–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ', duration: 120, price: 50000 }
        ]
      })
    ]);

    let clinicId;
    if (clinicResult.rows.length > 0) {
      clinicId = clinicResult.rows[0].id;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∏–Ω–∏–∫–∞ —Å ID: ${clinicId}`);
    } else {
      // –ö–ª–∏–Ω–∏–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º ID
      const existingClinic = await pool.query('SELECT id FROM clinics LIMIT 1');
      clinicId = existingClinic.rows[0].id;
      console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–ª–∏–Ω–∏–∫–∞ —Å ID: ${clinicId}`);
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—Ä–∞—á–µ–π
    const doctors = [
      {
        name: '–î–æ–∫—Ç–æ—Ä –ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á',
        specialization: '–¢–µ—Ä–∞–ø–µ–≤—Ç',
        services: ['consultation', 'treatment', 'cleaning']
      },
      {
        name: '–î–æ–∫—Ç–æ—Ä –ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞', 
        specialization: '–•–∏—Ä—É—Ä–≥',
        services: ['consultation', 'surgery']
      },
      {
        name: '–î–æ–∫—Ç–æ—Ä –°–∏–¥–æ—Ä–æ–≤ –ú–∏—Ö–∞–∏–ª –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á',
        specialization: '–û—Ä—Ç–æ–ø–µ–¥',
        services: ['consultation', 'prosthetics']
      }
    ];

    for (const doctor of doctors) {
      await pool.query(`
        INSERT INTO doctors (clinic_id, name, specialization, services, working_hours)
        VALUES ($1, $2, $3, $4, $5)
        ON CONFLICT DO NOTHING
      `, [
        clinicId,
        doctor.name,
        doctor.specialization,
        JSON.stringify(doctor.services),
        JSON.stringify({
          monday: { start: '09:00', end: '18:00' },
          tuesday: { start: '09:00', end: '18:00' },
          wednesday: { start: '09:00', end: '18:00' },
          thursday: { start: '09:00', end: '18:00' },
          friday: { start: '09:00', end: '18:00' }
        })
      ]);
    }

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –≤—Ä–∞—á–∏');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    await pool.query(`
      INSERT INTO patients (phone, name, preferred_language, platform)
      VALUES ($1, $2, $3, $4)
      ON CONFLICT (phone) DO NOTHING
    `, ['+77011234567', '–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç', 'ru', 'whatsapp']);

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç');

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

if (require.main === module) {
  seedDatabase();
}

module.exports = { seedDatabase };
