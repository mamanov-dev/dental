// –§–∞–π–ª: scripts/fix-duplicates.js
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

require('dotenv').config();

async function fixDuplicates() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
  let connectionString = process.env.DATABASE_URL;
  
  // –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–µ –≤ Docker), –º–µ–Ω—è–µ–º db –Ω–∞ localhost
  if (connectionString && connectionString.includes('@db:') && !process.env.RUNNING_IN_DOCKER) {
    connectionString = connectionString.replace('@db:', '@localhost:');
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
  }
  
  const pool = new Pool({ connectionString });

  try {
    console.log('üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...\n');

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    const stats = await pool.query(`
      SELECT 
        COUNT(*) as total_patients,
        COUNT(DISTINCT chat_id) as unique_chat_ids,
        COUNT(DISTINCT phone) as unique_phones,
        COUNT(*) FILTER (WHERE chat_id IS NOT NULL) as with_chat_id,
        COUNT(*) FILTER (WHERE phone IS NOT NULL) as with_phone
      FROM patients
    `);
    
    console.log(`  –í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: ${stats.rows[0].total_patients}`);
    console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö chat_id: ${stats.rows[0].unique_chat_ids}`);
    console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: ${stats.rows[0].unique_phones}`);
    console.log(`  –° chat_id: ${stats.rows[0].with_chat_id}`);
    console.log(`  –° —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${stats.rows[0].with_phone}\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicates = await pool.query(`
      SELECT chat_id, platform, COUNT(*) as count
      FROM patients
      WHERE chat_id IS NOT NULL
      GROUP BY chat_id, platform
      HAVING COUNT(*) > 1
      ORDER BY count DESC
    `);

    if (duplicates.rows.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –Ω–æ–º–µ—Ä
      const problemNumber = '+77783425825';
      const checkProblem = await pool.query(`
        SELECT id, phone, chat_id, platform, created_at
        FROM patients
        WHERE phone = $1 OR chat_id = $1
        ORDER BY created_at
      `, [problemNumber]);
      
      if (checkProblem.rows.length > 0) {
        console.log(`üì± –ó–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${problemNumber}:`);
        checkProblem.rows.forEach(row => {
          console.log(`  ID: ${row.id}, Phone: ${row.phone}, Chat: ${row.chat_id}, Platform: ${row.platform}`);
        });
      }
      
      await pool.end();
      return;
    }

    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${duplicates.rows.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
    duplicates.rows.slice(0, 5).forEach(row => {
      console.log(`  ${row.chat_id} (${row.platform}): ${row.count} –∑–∞–ø–∏—Å–µ–π`);
    });
    
    if (duplicates.rows.length > 5) {
      console.log(`  ... –∏ –µ—â–µ ${duplicates.rows.length - 5} –≥—Ä—É–ø–ø\n`);
    } else {
      console.log('');
    }

    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    console.log('‚ùì –•–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã? (yes/no): ');
    
    // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ CI/CD
    if (process.env.AUTO_FIX === 'true') {
      console.log('AUTO_FIX=true, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...\n');
    } else {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã readline
      console.log('–î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: AUTO_FIX=true npm run fix:duplicates\n');
      await pool.end();
      return;
    }

    // –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é
    const migrationPath = path.join(__dirname, 'fix-duplicate-patients.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...');
    await pool.query(migrationSQL);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');
    console.log('üìä –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    const newStats = await pool.query(`
      SELECT 
        COUNT(*) as total_patients,
        COUNT(DISTINCT chat_id) as unique_chat_ids,
        COUNT(DISTINCT phone) as unique_phones
      FROM patients
    `);
    
    console.log(`  –í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: ${newStats.rows[0].total_patients}`);
    console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö chat_id: ${newStats.rows[0].unique_chat_ids}`);
    console.log(`  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: ${newStats.rows[0].unique_phones}\n`);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const finalCheck = await pool.query(`
      SELECT COUNT(*) as dup_count
      FROM (
        SELECT chat_id, platform
        FROM patients
        WHERE chat_id IS NOT NULL
        GROUP BY chat_id, platform
        HAVING COUNT(*) > 1
      ) t
    `);
    
    if (finalCheck.rows[0].dup_count === 0) {
      console.log('üéâ –í—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
    } else {
      console.log('‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –¥—É–±–ª–∏–∫–∞—Ç—ã:', finalCheck.rows[0].dup_count);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
    console.error('\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
    
    if (error.code === '23505') {
      console.log('\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.');
    }
    
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
if (require.main === module) {
  fixDuplicates().then(() => {
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  }).catch(err => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  });
}

module.exports = { fixDuplicates };